
1. Crearemos una carpeta, proyecto desde cero, para ello, vamos a nuestro escritorio, creamos una carpeta y le ponemos un nombre, en este caso "CRUDCALENDARIO", abrimos la carpeta y en la linea de busqueda, ponemos cmd, se nos abre la terminal de comandos y allí escribimos: code ., se nos abrirá el entorno dev visual studio.

2. ya podemos instalar los modulos o paquetes de python, a son de qué probable, más adelante haya otro proyecto, vamos a aislarlo, para aislar un proyecto de otro proyecto q puede tener futuro, se precisa de un entorno virtual, un entorno virtual es una carpeta qué contendrá una versión de python, una propia versión de pip, inclusive, podemos indicarle qué vamos a tener unos scripts especiales para ese entorno, se crea por defecto cuando utilizamos un modulo, vamos a llamar un modulo de python para crearlo, para eso, vamos a abrir una terminal, dentro del entorno de desarrollo.

3. comprobamos qué versión de python tenemos instalada, copiamos lo siguiente: python --version, en este caso tenemos la 3.10.9.

4. para crear el entorno virtual decimos lo siguiente: py -m venv venv, el py es una abreviación de python, la m es para indicar qué voy a trabajar con un modulo, en este caso venv, por ultimo el venv del final, para indicar qué cree una carpeta llamada venv, no olvidar qué tambien hay otras maneras de crear entornos virtuales cómo conda o virtual env, damos enter y nos crea la carpeta, nos crea subcarpetas dentro de la carpeta venv, cómo: el include, lib, scripts, qué contendrá nuestros archivos, y también hay un archivo congif llamado pyvenv, entonces podemos utilizarlo para activar el entorno virtual, ya tenemos un entorno virtual qué podemos utilizar.

5. para activar ese entorno virtual podemos hacerlo de varias formas, una de ellas, en visual studio code, presionamos F1, escribimos: python select interpreter, puede qué aparezcan varias opciones, pero en este caso, visual studio, va a detectar qué en el proyecto hay una carpeta venv, normalmente aparece cómo recommended y con una estrella, damos clic en ese y lo abrirá por nosotros, si miramos y abrimos una nueva consola en vs, podemos verificar qué ya activa ese entorno virtual, si por x razón no funciona, podemos hacerlo de otra forma, voy a desactivar el venv con el comando "deactivate", podemos hacer lo siguiente: ".\venv\Scripts\activate". son las 2 formas de hacerlo.

6. vamos a instalar django, para ello, escribimos esto: "pip install django", instalará django en nuestro sistema y tendremos instalado django en nuestro entorno.

7. ya habiendo instalado django, tenemos un comando nuevo qué se llama dango-admin y para comprobar qué si lo tenemos y qué versión manejamos, hacemos lo siguiente en la terminal: "django-admin --version", damos enter y en este caso me dice qué tengo la versión: 4.2.7, de esta manera, ya podemos empezar a crear nuestro proyecto.

8. Para poder crear nuestro proyecto, vamos a utilizar el siguiente comando: "django-admin startproject calendarioTenis .", le estoy diciendo qué desde django-admin voy a utilizar el comando startproject para crear un proyecto, le colocamos un nombre, en este caso "calendarioTenis" y si le doy enter, el va a crear una carpeta con el nombre q le hemos puesto y dentro, los archivos, no obstante, nosotros ya tenemos un proyecto creado, entonces es mejor crearlo dentro de esa propia carpeta, así que colocamos después del nombre separado, un ., y lo qué va a hacer es q va a crear el archivo manage.py y creará la carpeta qué hemos escrito en la linea de comandos, con ello, ya tengo un proyecto de django.

9. vamos a ejecutar el proyecto utilizando el comando: "python manage.py runserver", si presionamos enter, esto ejecutará nuestro proyecto en el localhost 8000 y si abrimos el proyecto, podremos visualizar la interfaz de django, con esto, ya tenemos nuestro proyecto configurado.

10. Cuando yo creo un proyecto en DJANGO, estoy colocando una carpeta, en este caso: CRUDCALENDARIO, ahora bien, django nos dice qué cuando creemos aplicaciones, debemos de crear diferentes carpetas qué contendrán distintas secciones de nuestro proyecto, estas carpetas reciben el nombre de aplicación, ejemplo: puedo tener una aplicación qué se llame reservas, otra qué sea la principal, qué se llame inicio, django no limita a colocar todos los archivos combinados, podemos organizarlos utilizando el concepto de aplicaciones, así que podemos crear distintas aplicaciones, pero siempre formarán parte del mismo proyecto, así que don Jose, nosotros vamos a crear una aplicación, en este caso le podemos poner el nombre de tareas, no?, esta aplicación nos va a permitir poder administrar tareas, permitirá al usuario poder guardar tareas, pero recordar, todas las aplicaciones qué creemos, estarán siempre dentro de una carpeta mayor, en este caso: CRUDCALENDARIO

1. Crearemos una carpeta, proyecto desde cero, para ello, vamos a nuestro escritorio, creamos una carpeta y le ponemos un nombre, en este caso "CRUDCALENDARIO", abrimos la carpeta y en la linea de busqueda, ponemos cmd, se nos abre la terminal de comandos y allí escribimos: code ., se nos abrirá el entorno dev visual studio.

2. ya podemos instalar los modulos o paquetes de python, a son de qué probable, más adelante haya otro proyecto, vamos a aislarlo, para aislar un proyecto de otro proyecto q puede tener futuro, se precisa de un entorno virtual, un entorno virtual es una carpeta qué contendrá una versión de python, una propia versión de pip, inclusive, podemos indicarle qué vamos a tener unos scripts especiales para ese entorno, se crea por defecto cuando utilizamos un modulo, vamos a llamar un modulo de python para crearlo, para eso, vamos a abrir una terminal, dentro del entorno de desarrollo.

3. comprobamos qué versión de python tenemos instalada, copiamos lo siguiente: python --version, en este caso tenemos la 3.10.9.

4. para crear el entorno virtual decimos lo siguiente: py -m venv venv, el py es una abreviación de python, la m es para indicar qué voy a trabajar con un modulo, en este caso venv, por ultimo el venv del final, para indicar qué cree una carpeta llamada venv, no olvidar qué tambien hay otras maneras de crear entornos virtuales cómo conda o virtual env, damos enter y nos crea la carpeta, nos crea subcarpetas dentro de la carpeta venv, cómo: el include, lib, scripts, qué contendrá nuestros archivos, y también hay un archivo congif llamado pyvenv, entonces podemos utilizarlo para activar el entorno virtual, ya tenemos un entorno virtual qué podemos utilizar.

5. para activar ese entorno virtual podemos hacerlo de varias formas, una de ellas, en visual studio code, presionamos F1, escribimos: python select interpreter, puede qué aparezcan varias opciones, pero en este caso, visual studio, va a detectar qué en el proyecto hay una carpeta venv, normalmente aparece cómo recommended y con una estrella, damos clic en ese y lo abrirá por nosotros, si miramos y abrimos una nueva consola en vs, podemos verificar qué ya activa ese entorno virtual, si por x razón no funciona, podemos hacerlo de otra forma, voy a desactivar el venv con el comando "deactivate", podemos hacer lo siguiente: ".\venv\Scripts\activate". son las 2 formas de hacerlo.

6. vamos a instalar django, para ello, escribimos esto: "pip install django", instalará django en nuestro sistema y tendremos instalado django en nuestro entorno.

7. ya habiendo instalado django, tenemos un comando nuevo qué se llama dango-admin y para comprobar qué si lo tenemos y qué versión manejamos, hacemos lo siguiente en la terminal: "django-admin --version", damos enter y en este caso me dice qué tengo la versión: 4.2.7, de esta manera, ya podemos empezar a crear nuestro proyecto.

8. Para poder crear nuestro proyecto, vamos a utilizar el siguiente comando: "django-admin startproject calendarioTenis .", le estoy diciendo qué desde django-admin voy a utilizar el comando startproject para crear un proyecto, le colocamos un nombre, en este caso "calendarioTenis" y si le doy enter, el va a crear una carpeta con el nombre q le hemos puesto y dentro, los archivos, no obstante, nosotros ya tenemos un proyecto creado, entonces es mejor crearlo dentro de esa propia carpeta, así que colocamos después del nombre separado, un ., y lo qué va a hacer es q va a crear el archivo manage.py y creará la carpeta qué hemos escrito en la linea de comandos, con ello, ya tengo un proyecto de django.

9. vamos a ejecutar el proyecto utilizando el comando: "python manage.py runserver", si presionamos enter, esto ejecutará nuestro proyecto en el localhost 8000 y si abrimos el proyecto, podremos visualizar la interfaz de django, con esto, ya tenemos nuestro proyecto configurado.

NOTA: Cuando yo creo un proyecto en DJANGO, estoy colocando una carpeta, en este caso: calendarioTenis, ahora bien, django nos dice qué cuando creemos aplicaciones, debemos de crear diferentes carpetas qué contendrán distintas secciones de nuestro proyecto, estas carpetas reciben el nombre de aplicación, ejemplo: puedo tener una aplicación qué se llame reservas, otra qué sea la principal, qué se llame inicio, django no limita a colocar todos los archivos combinados, podemos organizarlos utilizando el concepto de aplicaciones, así que podemos crear distintas aplicaciones, pero siempre formarán parte del mismo proyecto, así que don Jose, nosotros vamos a crear una aplicación, en este caso le podemos poner el nombre de tasks, esta aplicación nos va a permitir poder administrar tareas, permitirá al usuario poder guardar tareas, pero recordar, todas las aplicaciones qué creemos, estarán siempre dentro de una carpeta mayor, en este caso: CRUDCALENDARIO.

10. ya habiendo dicho lo anterior, vamos a crear una aplicación, para esto, django también tiene un comando, es el siguiente: "python manage.py startapp tareas", el comando startapp es para inicializar una aplicación, en este caso la llamamos tasks, de esta manera, ya tengo una aplicación, no obstante, django no la conoce aún, para qué la conozca, para conectar la aplicación con nuestro proyecto principal, vamos a situarnos en la carpeta principal "calendarioTenis", allí, tenemos toda la configuración de nuestro proyecto, vamos allá y nos situamos sobre el archivo settings.py, allá están las configuraciones globales, vendrían siendo las configuraciones de todo el proyecto, nos situamos en la parte de INSTALLED_APPS y haremos lo siguiente:, debajo de la última, qué vendría siendo staticfiles, vamos a presionar enter, luego de la coma y dentro de comillas ponemos el nombre de la aplicacion: 'tasks', ya tengo la aplicación añadida a mi proyecto.

11. vamos a ponerlo a prueba, vamos a crear un hola mundo y para ello, vamos a situarnos en la carpeta tasks, abrimos el archivo views.py, ese archivo sirve para nosotros ejecutar algo cuando una url sea visitada, así que ya estando dentro del archivo, debajo de el comentario "Create your views here", vamos a hacer crear una ruta qué se va a llamar holamundo, esta ruta va a recibir un request, es un parametro qué django ofrece para obtener información del cliente q visita la pagina, luego de eso, le decimos qué va a retornar, pero antes de eso don jose, debemos de importar algo desde django, asi que, en views.py debajo del primer import, ponemos from django.http import HttpResponse, ya que django tiene una función q se llama HttpResponse, asi que continuando, despues del return, vamos a llamar lo qué estamos importando, en este caso HttpResponse y ponemos un mensaje cualquiera, en este caso: Hola mundo, entre parentesis y comillas, asi se vería por ahora el archivo views.py:


from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.
def holamundo(request):
    return HttpResponse ('Hola mundo')

12. Con esto, finalmente tenemos una función qué va a ejecutar algo y devolverá un texto al cliente, para decirle cuando va a ejecutar esto, vamos a ir a nuestra carpeta principal, en este caso "calendariotenis", luego vamos al archivo urls.py, qué basicamente vendrían siendo las urls de toda la aplicación y cómo podemos evidenciar, ya tenemos una url configurada por defecto llamada admin, eso se debe a qué django ya tiene un panel de administrador, más adelante se utilizará, pero por ahora, creamos una ruta nueva debajo del path inicial en la parte de las url, así: path('', ), esto para decirle qué simplemente voy a colocar un texto vacio, cuando visiten la pagina principal, yo voy a estar ejecutando la carpeta de tareas: tasks, así que para poder llamarlo, hacemos lo siguiente debajo del import path: from tasks import views, ahora tengo el archivo views qué tenía en la carpeta tasks y vamos a decir qué desde views, vamos a utilizar su función holamundo, así quedaría el path: path('', views.holamundo), ahora, si guardamos y ejecutamos el proyecto, nos llevará al mensaje de hola mundo, as quedaría el archivo inicialmente de urls.py:

from django.contrib import admin
from django.urls import path
from tasks import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', views.holamundo)
]


CREACIÓN DE REGISTRO FORM

13. En lugar de devolver un texto qué puede ser interpretado, podemos devolver una pagina entera, un html completo, para lograrlo, vamos a la carpeta task y dentro de task, crearemos una carpeta con el siguiente nombre: "templates", dentro de templates, vamos a crear nuestro primer archivo, en este caso, "signup.html", ya habiendolo creado, podemos colocar cualquier sintaxis qué queramos, en este caso, podemos poner lo siguiente dentro del archivo signup.html: <h1>Registrate</h1> y lo ejecutamos, así qué, cuando se visite views, ya no le diremos qué vamos a enviar una respuesta http, quitamos esta parte: HttpResponse ('Hola mundo'), quitamos también el import de httpResponse.

14. se va a utilizar un metodo qué DJANGO ofrece de su biblioteca de shortcuts, llamado render, entonces le decimos: "return render(request, 'signup.html')", render espera el parametro request cómo primer parametro, el segundo parametro, es el nombre del archivo
qué en este caso, es el signup.html, si yo guardo, el server se reinicia y podremos ver qué me dirá: Registrate, de esta manera, estamos enviando un archivo html y en el archivo podremos crear nuestra interfaz.

15. Vamos a requerir un form para qué el usuario pueda registrarse, DJANGO ya provee esta funcionalidad, permite autenticar, permite la manera de hacer login en nuestro aplicativo, así que vamos a importaer una clase qué DJANGO tiene, para ello, hacemos lo siguiente: from django.contrib.auth.forms import userCreationForm, le estoy diciendo qué desde django, me import userCreationForm, utilizando dicha clase, nosotros vamos a decir qué cuando yo ejecute el server, me va a devolver un formulario, así qué en el render del signup, le voy a decir qué le voy a pasar un parametro, en este caso userCreationForm, así que, despues de lss comillas del signup ponemos una coma y separado, ponemos llaves, presionamos enter y decimos lo siguiente: 'form': userCreationForm, si yo lo guardo e intento mostrarlo por pantalla en el html así: {{form}} y guardo, voy a la aplicación refresco, ya me da un formulario completamente creado y le coloca atributos cómo su longitud maxima, qué es requerido, le coloca ids..., de esta manera, ya tenemos un formulario creado para permitir qué el usuario se pueda registrar, pero como podemos ver, no está dentro de un form, entonces, en el archivo html, vamos a crear una etiqueta form y dentro de ella, llamamos el parametro, así:
 <form>
{{form}}
</form>

Al lado, dentro de la parte de {{form}}, colocamos: ".as_p", colocará el texto al frente de cada campo, así tendremos cada uno de los elementos del formulario en una etiqueta p, además, vamos a querer decirle a donde va a enviar estos datos del formulario, así qué debemos de colocar un botón debajo del parametro form que diga Registrate y lo qué hará, es qué va a enviar los datos del formulario al lugar qué yo coloque en el action del form, si, debemos de colocar un action, en este caso, colocamos en el form: action="/signup/", de esta forma, cuando yo le haga click al boton, el tratará de buscar una ruta qué se llame signup, en el archivo urls.py, sin embargo, esta ruta no existe, por ahora lo vamos a dejar así en el formulario, pero más adelante crearemos esa ruta, además, recordar qué el formulario debe de tener un metodo, en este caso, post, es un metodo http qué envia de forma oculta los campos y de esta forma no irá a travez de la url.

16. Si llenamos los campos y luego pulsamos el boton registrate, me va a tirar un error indicando qué esta ruta: Signup, no se encuentra, podemos crearlo, vamos a urls y creamos otra ruta, después del holamundo cerrado, ponemos una coma, presionamos enter y ponemos: path('Signup/', views.holamundo), ahora, debería de enviarlo.

17. si lo envía, ya encuentra la ruta pero da un error de CSRF, significa qué Django ya tiene un metodo para asegurar nuestra aplicación, para evitar qué nuestra pagina sea suplantada, pone un token en cada formulario, para indicar qué fue generado por el propio servidor, en este caso, el nuestro, así que, para añadir ese token, vamos al archivo signup y despues del primer form, presionamos enter y abrimos este código de jinja: {%csrf_token%}, jinja es el motor de plantillas de django, es el que permite usar la sintaxis del form qué pusimos ahora entre corchetes, ahora si volvemos al signup, abrimos inspeccionar, veremos que dentro del form hay un input oculto, tiene un nombre, ese nombre es csrfmidllewaretoken  y tiene un valor, este valor indica qué este formulario fue creado por nuestro servidor y no por otro, por lo tanto, si alguien clona la pagina y envia un dato, no será procesado por que el token no es el mismo..., no es el mismo token que se ha generado por nuestro servidor, de esta forma, tenemos un mecanismo de seguridad un poco más avanzado, por lo qué no tendremos qué implementarlo desde 0, con esto ya tenemos nuestro formulario de signup, en el siguiente paso, vamos a tratar de recibir los datos en una de las vistas ya configuradas en urls.py para después, guardarlo en una base de datos
